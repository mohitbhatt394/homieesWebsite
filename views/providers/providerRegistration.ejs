



<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <meta name="description" content="Register as a service provider on our platform"/>
  <title>Become a Service Provider | MyWebsite</title>
  <link rel="stylesheet" href="/style/main.css" />
  <link rel="stylesheet" href="/style/providerRegister.css">

 
</head>
<body>
  <%- include('../partials/navbar') %>

  <% if (success_msg) { %>
    <div class="flash-message alert-success">
      <%= success_msg %>
      <button class="close-btn" onclick="this.parentElement.style.display='none';">&times;</button>
    </div>
  <% } %>
  
  <% if (error_msg) { %>
    <div class="flash-message alert-danger">
      <%= error_msg %>
      <button class="close-btn" onclick="this.parentElement.style.display='none';">&times;</button>
    </div>
  <% } %>

  <main class="provider-registration-page">
    <div class="container">
      <div class="registration-card">
        <h1 class="page-title">Become a Service Provider</h1>

        <form action="/provider/register" method="POST" class="registration-form" id="providerForm" enctype="multipart/form-data">
          <div class="form-group">
            <label for="providerName" class="form-label">Your Name</label>
            <input type="text" id="providerName" name="providerName" required class="form-input" />
          </div>

          <div class="form-group">
            <label for="phoneNumber" class="form-label">Phone Number</label>
            <input type="tel" id="phoneNumber" name="phoneNumber" pattern="[0-9]{10}" title="10 digit phone number" required class="form-input" />
            <!-- <div id="recaptcha-container"></div>
            <button type="button" id="sendOtpBtn" class="btn secondary-btn">Send OTP</button> -->
          </div>

          <!-- <div class="form-group" id="otpGroup" style="display: none;">
            <label for="otp" class="form-label">OTP Verification</label>
            <input type="text" id="otp" name="otp" placeholder="Enter 6-digit OTP" class="form-input" />
            <button type="button" id="verifyOtpBtn" class="btn secondary-btn">Verify OTP</button>
          </div> -->

          <!-- Other form fields remain the same -->
          <!-- Other form fields -->
          <div class="form-row">
            <div class="form-group">
              <label for="state" class="form-label">State</label>
              <select id="state" name="state" required class="form-select" onchange="fetchDistricts()">
                <option value="">Select State</option>
                <% states.forEach((state) => { %>
                  <option value="<%= state.isoCode %>"><%= state.name %></option>
                <% }); %>
              </select>
            </div>

            <div class="form-group">
              <label for="district" class="form-label">District</label>
              <select id="district" name="district" required class="form-select">
                <option value="">Select District</option>
              </select>
            </div>
          </div>

          <div class="form-group">
            <label for="area" class="form-label">Area/Locality</label>
            <input type="text" id="area" name="area" required class="form-input" />
          </div>

          <div class="form-group">
            <label for="zipCode" class="form-label">Zip Code</label>
            <input type="text" id="zipCode" name="zipCode" pattern="[0-9]{6}" title="6 digit zip code" required class="form-input" />
          </div>

          <div class="form-group">
            <label for="category" class="form-label">Service Category</label>
            <select id="category" name="category" required class="form-select">
              <option value="">Select Category</option>
              <% serviceCategories.forEach((category) => { %>
                <option value="<%= category.categoryName %>"><%= category.categoryName %></option>
              <% }); %>
            </select>
          </div>

          <div class="form-group">
            <label for="picture" class="form-label">Profile Picture</label>
            <input type="file" id="picture" name="picture" accept="image/*" class="form-input" />
          </div>

          <!-- <input type="hidden" id="phoneVerified" name="phoneVerified" value="false"> -->
          <input type="hidden" id="stateName" name="stateName">

          <button type="submit" class="btn primary-btn" id="registerBtn">Register as Provider</button>
        </form>
      </div>
    </div>
  </main>

  <script>


    async function fetchDistricts() {
      const stateDropdown = document.getElementById("state");
      const stateCode = stateDropdown.value;
      const districtDropdown = document.getElementById("district");
  
      districtDropdown.innerHTML = '<option value="">Select District</option>';
  
      if (!stateCode) return;
  
      try {
        const response = await fetch(`/provider/get-districts?stateCode=${stateCode}`);
        const data = await response.json();
  
        if (data.stateName) {
          let stateNameInput = document.getElementById("stateName");
          if (!stateNameInput) {
            stateNameInput = document.createElement("input");
            stateNameInput.type = "hidden";
            stateNameInput.id = "stateName";
            stateNameInput.name = "stateName";
            document.querySelector("form").appendChild(stateNameInput);
          }
          stateNameInput.value = data.stateName;
        }
  
        data.districts.forEach(district => {
          const option = document.createElement("option");
          option.value = district.name;
          option.textContent = district.name;
          districtDropdown.appendChild(option);
        });
      } catch (error) {
        console.error("Error fetching districts:", error);
      }
    }
  
  </script>

  <script>
    // Flash message functions
    function showFlash(message, type = "success") {
      const flash = document.createElement("div");
      flash.className = `flash-message ${type === "success" ? "alert-success" : "alert-danger"}`;
      flash.innerHTML = `
        <span>${message}</span>
        <button class="close-btn" onclick="this.parentElement.style.display='none';">&times;</button>
      `;
      document.body.appendChild(flash);

      setTimeout(() => {
        flash.style.opacity = "0";
        setTimeout(() => flash.remove(), 500);
      }, 4000);
    }

    


//     document.addEventListener('DOMContentLoaded', async () => {
//   try {
//     const firebaseConfig = {
//       apiKey: '',
//       authDomain: '',
//       projectId: '',
//       storageBucket: '',
//       messagingSenderId: '',
//       appId: ''
//     };

//     // Initialize Firebase (only if not already initialized)
//     if (!firebase.apps.length) {
//       firebase.initializeApp(firebaseConfig);
//     }
//     window.auth = firebase.auth();

//     // Initialize reCAPTCHA with proper configuration
//     window.recaptchaVerifier = new firebase.auth.RecaptchaVerifier('recaptcha-container', {
//       'size': 'normal', // or 'invisible' if you prefer
//       'callback': (response) => {
//         console.log("reCAPTCHA verified:", response);
//       },
//       'expired-callback': () => {
//         console.log("reCAPTCHA expired - resetting");
//         grecaptcha.reset(window.recaptchaWidgetId);
//       }
//     });

//     // Render the reCAPTCHA widget
//     window.recaptchaWidgetId = await window.recaptchaVerifier.render();
//     console.log("reCAPTCHA widget rendered with ID:", window.recaptchaWidgetId);

//   } catch (error) {
//     console.error("Initialization error:", error);
//     showFlash("Failed to initialize security verification. Please refresh the page.", "error");
    
//     // Additional error details for debugging
//     if (error.code === 'auth/argument-error') {
//       console.error("Common causes:");
//       console.error("1. Missing or invalid reCAPTCHA container element");
//       console.error("2. Incorrect reCAPTCHA configuration");
//       console.error("3. Multiple Firebase initializations");
//     }
//   }
// });

    // Send OTP handler
    // document.getElementById("sendOtpBtn").addEventListener("click", async function() {
    //   const button = this;
    //   button.disabled = true;
    //   button.textContent = "Sending...";

    //   try {
    //     const phoneNumber = "+91" + document.getElementById("phoneNumber").value.trim();
        
    //     if (!/^\+91\d{10}$/.test(phoneNumber)) {
    //       throw new Error("Please enter a valid 10-digit phone number");
    //     }

    //     console.log("Verifying reCAPTCHA...");
    //     const recaptchaToken = await window.recaptchaVerifier.verify();
    //     console.log("reCAPTCHA token:", recaptchaToken);
        
    //     console.log("Sending OTP...");
    //     const confirmation = await firebase.auth().signInWithPhoneNumber(
    //       phoneNumber, 
    //       window.recaptchaVerifier
    //     );
        
    //     window.confirmationResult = confirmation;
    //     console.log("OTP sent successfully!");
    //     showFlash("OTP sent successfully!", "success");
    //     document.getElementById("otpGroup").style.display = "block";
        
    //   } catch (error) {
    //     console.error("Error details:", error);
        
    //     if (error.code === 'auth/invalid-app-credential') {
    //       showFlash("Security check failed. Please complete the reCAPTCHA again.", "error");
    //     } else {
    //       showFlash("Error: " + error.message, "error");
    //     }
        
    //     // Reset reCAPTCHA on error
    //     grecaptcha.reset(window.recaptchaWidgetId);
    //   } finally {
    //     button.textContent = "Send OTP";
    //     button.disabled = false;
    //   }
    // });

    // Verify OTP handler
    // document.getElementById("verifyOtpBtn").addEventListener("click", async function() {
    //   const button = this;
    //   button.disabled = true;
    //   button.textContent = "Verifying...";

    //   try {
    //     const otp = document.getElementById("otp").value.trim();

    //     if (!/^\d{6}$/.test(otp)) {
    //       throw new Error("Please enter a valid 6-digit OTP");
    //     }

    //     const result = await window.confirmationResult.confirm(otp);
    //     document.getElementById("phoneVerified").value = "true";
    //     showFlash("Phone number verified successfully!", "success");
    //     document.getElementById("otpGroup").style.display = "none";

    //   } catch (error) {
    //     console.error("OTP Verification Error:", error);
    //     showFlash("OTP Error: " + error.message, "error");
    //   } finally {
    //     button.textContent = "Verify OTP";
    //     button.disabled = false;
    //   }
    // });

    // Form submission handler
    document.getElementById("providerForm").addEventListener("submit", async function(e) {
      e.preventDefault();
      
      // if (document.getElementById("phoneVerified").value !== "true") {
      //   showFlash("Please verify your phone number first", "error");
      //   return;
      // }

      const button = document.getElementById("registerBtn");
      button.disabled = true;
      button.textContent = "Registering...";

      try {
        // const token = await auth.currentUser?.getIdToken();
        const formData = new FormData(this);
        
        // if (token) {
        //   formData.append("firebaseToken", token);
        // }

        const response = await fetch(this.action, {
          method: "POST",
          body: formData
        });

        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.message || 'Registration failed');
        }

        if (result.success) {
          showFlash("Registration successful! Redirecting...", "success");
          setTimeout(() => {
            window.location.href = result.redirectUrl || "/";
          }, 2000);
        }
      } catch (error) {
        console.error("Registration Error:", error);
        showFlash("Registration Error: " + error.message, "error");
      } finally {
        button.textContent = "Register as Provider";
        button.disabled = false;
      }
    });

    // Auto-remove flash messages
    setTimeout(() => {
      document.querySelectorAll('.flash-message').forEach(msg => {
        msg.style.opacity = '0';
        setTimeout(() => msg.remove(), 300);
      });
    }, 5000);
  </script>
</body>
</html>